<?php

/**
 * Resource
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    skeleton
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Resource extends BaseResource
{

  /**
   * Whether or not to publicly display the owner's contact information
   * based on the value of the privacy field
   * 
   * @return boolean
   */
  public function showContactInformation()
  {
    return ($this->privacy == 'show_info');
  }
  
  public function getOppositeType()
  {
    return $this['transaction_type'] == 'need' ? 'have' : 'need';
  }
  
  /* 
    Code to capture the county for the item
  */
  public function retrieveGeocodesFromUrl($url)
  {
    $locationInfo = array('latitude' => null, 'longitude' => null, 'county' => null);
    
    $json = json_decode(file_get_contents($url));
    
    if (!isset($json->Placemark[0])) 
    {
      return $locationInfo;
    }
    
    $info = $json->Placemark[0];
    
    if (isset($info->Point->coordinates)) 
    {
      $coordinates = $info->Point->coordinates;
      $locationInfo['latitude'] = $coordinates[1];
      $locationInfo['longitude'] = $coordinates[0];
    }
    
    if (isset($info->AddressDetails->Country->AdministrativeArea->SubAdministrativeArea->SubAdministrativeAreaName))
    {
      $county = $info->AddressDetails->Country->AdministrativeArea->SubAdministrativeArea->SubAdministrativeAreaName;
      $locationInfo['county'] = $county;
    }
    
    return $locationInfo;
  }
  
  public function refreshGeocodes($url = null)
  {
    if (!$url) 
    {
      $url = $this->buildUrlFromQuery($this->buildGeoQuery());
      $url = substr($url, 0, strrpos($url, 'csv')) . 'json';
    }

    $geocodes = $this->retrieveGeocodesFromUrl($url);
    $this['latitude'] = $geocodes['latitude'];
    $this['longitude'] = $geocodes['longitude'];
    $this['county'] = $geocodes['county'];
  }
  
  public function getAddressArray()
  {
    $csz = array($this['city'], $this['state'], $this['zip']);
    $address = array($this['address_1'], $this['address_2'], implode(', ', array_filter($csz)));
    
    return array_filter($address);
  }
  
  public function getAddress($sep = '<br />')
  {
    return implode($sep, $this['address_array']);
  }
  
}
